/* FDF shader for sampling of rendered silhouette at provided random
 * sampling positions in order to update background dot distribution.
 *
 * (c) 2008 by Mario Kleiner, licensed under MIT license.
 */

#extension GL_ARB_texture_rectangle : enable


uniform sampler2DRect SilSamplePositions;
uniform sampler2DRect Silhouette;

uniform float ViewportHeight;
uniform float SilAcceptThreshold;

void main(void)
{
    /* Read sample position from random textures RG channels */
    /* Read accept random value from B channel: */
    vec3 pos = texture2DRect(SilSamplePositions, gl_TexCoord[0].st).rgb;

    /* Sample location from background? Check Silhouette buffer: */
    if (pos.z * texture2DRect(Silhouette, pos.xy).b <= SilAcceptThreshold) {
        /* Background pixel hit: Emit background vertex. */
        gl_FragColor = vec4(pos.x, ViewportHeight - pos.y, 0.5, 1.0);
    }
    else {
        /* Shape pixel hit: Discard vertex: */
        gl_FragColor = vec4(0.0, 0.0, -10, 1.0);
    }
}
